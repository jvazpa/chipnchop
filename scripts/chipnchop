#! /bin/bash

echo ""
echo "-. .-.   .-. .-.   .-. .-.   ."
echo "||\|||\ /|||\|||\ /|||\|||\ /|"
echo "|/ \|||\|||/ \|||\|||/ \|||\||"
echo "~   ·-~ ·-·   ~-~ ·-·   -~  ·~"



echo ""
echo -e "\033[1mChipNChop\033[0m is a straight-forward bash script that performs ChIP-seq data analysis for Arabidopsis thaliana. For this purpose, it takes an TXT dataset including parameters detailed in the README document."
echo ""

## The next message will appear if no imputs are given.

if [ $# -lt 1 -o $# -gt 2 ]
then
        echo "Usage: bash chipnchop <FULL/PATH/to/params> [options]"
        echo ""
        echo "params		Input file including the parameters. Check documentation"
        echo "		in order to create an acceptable parameters file. IT MUST"
	echo "		CLARIFY THE COMPLETE DIRECTORY TO PARAMS FILE."
        echo ""
        echo "options"
        echo "-TF		This option must be specified if the analyzed proteins"
        echo "		are transcription factors or interact in a similar way."
        echo "		If not specified, this option is DEFAULT."
        echo "-HI		This option must be specified if the analyzed proteins"
        echo "		are	histones or other specific epigenetics marks that"
        echo " 		affect large portions of DNA, in contrast to transcription factors."

        exit
fi

## In any other case, the script will print the experiment name and number of
## samples specified in the parameters file.

MODE=$2

if [ $# -eq 1 ]; then
MODE=-TF
fi


if [[ $MODE != -TF && $MODE != -HI ]]; then
echo ""
echo -e "Invalid protein type. Write -TF or -HI as the second parameter you introduce."
echo ""
exit
fi

if [[ $MODE == -TF ]]; then
echo ""
echo -e "\e[4mProtein type\e[0m = Transcription factor (-TF)"
echo ""
fi

if [[ $MODE == -HI ]]; then
echo ""
echo -e "\e[4mProtein type\e[0m = Histone/epigenetic mark (-HI)"
echo ""
fi


echo ""
echo "============================"
echo "|    Reading parameters    |"
echo "============================"
echo ""

PARAMS=$1

WD=$(grep working_directory: $PARAMS | awk '{ print $2 }')
echo -e "\e[4mWorking directory\e[0m: $WD"

EXP=$(grep experiment_name $PARAMS | awk '{ print $2 }')
echo -e "\e[4mExperiment name\e[0m: $EXP"

GEND=$(grep genome_directory: $PARAMS | awk '{ print $2 }')
echo -e "\e[4mGenome directory\e[0m: $GEND"

ANND=$(grep annotation_directory: $PARAMS | awk '{ print $2 }')
echo -e "\e[4mAnnotation directory\e[0m: $ANND"

INSDIR=$(grep installation_directory: $PARAMS | awk '{ print $2 }')
echo -e "\e[4mInstallation directory\e[0m: $INSDIR"

CHIPNUM=$(grep chip_sample_number: $PARAMS | awk '{ print $2 }')
echo -e "\e[4mNumber of CHIP samples\e[0m: $CHIPNUM"

INPNUM=$(grep input_sample_number: $PARAMS | awk '{ print $2 }')
echo -e "\e[4mNumber of INPUT samples\e[0m: $INPNUM"

TOTNUM=$(( $CHIPNUM + $INPNUM ))
echo -e "$TOTNUM samples have been given as an input."


echo ""
echo "============================"
echo "|    Creating workspace    |"
echo "============================"
echo ""

## Once these parameters have been read, workspace is set:

cd $WD
mkdir $EXP
cd $EXP
mkdir genome annotation samples results

cd genome
cp $GEND genome.fa

cd ../annotation
cp $ANND annotation.gtf

cd $WD/$EXP/samples
mkdir chip input


## Copying chip samples

cd chip

i=1
CHIP=()
while [ $i -le $CHIPNUM ]
do
	CHIP[$i]=$(grep chip_sample_$i: $PARAMS | awk '{ print $2 }')
        cp ${CHIP[$i]} chip_$i.fq.gz
        ((i++))
	echo -e "\e[4mCHIP samples directory\e[0m = ${CHIP[@]}"
done



## Copying input samples

cd ../input

i=1
INPUT=()
while [ $i -le $INPNUM ]
do
        INPUT[$i]=$(grep input_sample_$i: $PARAMS | awk '{ print $2 }')
        cp ${INPUT[$i]} input_$i.fq.gz
        ((i++))

	echo -e "\e[4mINPUT samples directory\e[0m = ${INPUT[@]}"
done


echo ""
echo "Workspace succesfully created"


echo ""
echo "============================"
echo "|     Indexing genome      |"
echo "============================"
echo ""
echo "Indexing the genome. This may take a while..."
echo ""

cd $WD/$EXP/genome
bowtie2-build $GEND index


echo ""
echo "========================="
echo "|   Sample processing   |"
echo "========================="
echo ""


cd $WD/$EXP/samples/chip

i=1
while [ $i -le $CHIPNUM ]
do
	bash ${INSDIR}/scripts/sample_processing.sh chip_$i.fq.gz $i $TOTNUM $INSDIR $WD/$EXP/results $WD/$EXP/samples/chip/
	((i++))
done


cd $WD/$EXP/samples/input

i=1
while [ $i -le $INPNUM ]
do
	bash ${INSDIR}/scripts/sample_processing.sh input_$i.fq.gz $i $TOTNUM $INSDIR $WD/$EXP/results $WD/$EXP/samples/input/
	((i++))
done


echo ""
echo "============================"
echo "|      Peaks calling       |"
echo "============================"
echo ""

cd $WD/$EXP/results

if [[ $MODE == -TF ]]; then

macs2 callpeak -t ../samples/chip/sample_*.bam -c ../samples/input/sample_*.bam -f BAM --outdir . -n $EXP

fi

if [[ $MODE == -HI ]]; then

macs2 callpeak -t ../samples/chip/sample_*.bam -c ../samples/input/sample_*.bam -f BAM --outdir . -n $EXP --broad

fi


## R script is moved from installation directory to results

cp $INSDIR/scripts/target_genes*.R .

## R script is running!

if [[ $MODE == -TF ]]; then

	Rscript target_genes_tf.R $WD/$EXP/results/ $EXP

fi

if [[ $MODE == -HI ]]; then

	Rscript target_genes_hi.R $WD/$EXP/results/ $EXP

fi


echo ""
echo "============================="
echo "|      Finding motifs       |"
echo "============================="
echo ""

if [[ $MODE == -TF ]]; then

findMotifsGenome.pl ${EXP}_summits.bed tair10 motif_finding_results -len 8 -size 200

fi

if [[ $MODE == -HI ]]; then

findMotifsGenome.pl ${EXP}_peaks.broadPeak tair10 motif_finding_results -len 8 -size 200

fi

echo "Analysis is done!"
